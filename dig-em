#!/usr/bin/env bash

##~~~~~~~~~~~~~~~~~~~~~~~~ BEGIN Starting Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~##
envir--()
{
wrn="\033[31m"   ## Warnings / Infinite Loops
ins="\033[1;32m" ## Instructions
out="\033[1;33m" ## Outputs
hdr="\033[1;34m" ## Headers
inp="\033[36m"   ## Inputs
wtf="\033[34m"   ## WTFs
rst="\e[0m"      ## Reset
current_ver=2.0.2
rel_date="30 October 2017"
launch_dir=$(pwd)

## Set query timeout
time=2
}
##~~~~~~~~~~~~~~~~~~~~~~~~~~ END Starting Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~##

##~~~~~~~~~~~~~~~~~~~~~~~~~~ BEGIN Program Function ~~~~~~~~~~~~~~~~~~~~~~~~~~##
usage--()
{
clear
echo -e "$out\nOptions:$ins
-f: Ask for the zonefile based on a list of hosts to be parsed
-d: Ask for the zonefile of a single domain

Examples:$ins
./dig-em -f domains.list
    $hdr- Attempt to grab the zonefiles of the domains listed in domains.lst$ins

./dig-em -d foo.com
    $hdr- Attempt to grab the zonefile for foo.com$rst" 
exit 1
}

trap--()
{
clear
echo -e "$hdr\nStopped processing at $out$file$hdr using the file $out$launch_dir/$list$wrn"
cd $launch_dir
start=$(grep -n $file $list | cut -d: -f1)
finish=$(echo "$end - $start" | bc)
let finish++
echo -e "$out\ntail -n $finish $list > new_$list\n\n$inp"
echo "tail -n $finish $list > new_$list" > $basedir/restart_dirs
exit 1
}

site--()
{
    ## This function is used to end a single domain axfr
    end_site--()
    {
    if [[ $status -eq 0 ]]; then
        [[ $sEnv == 'bash' ]] && echo -e "\n\033[1;33mDone!!$hdr\nRequested Information Listed in $out$basedir$rst\n"
        exit 0
    fi
    }

## Check for the directory
if [[ -d "$domain" ]]; then
    mkdir $domain\_$$
    basedir=$launch_dir/$domain\_$$
else
    mkdir $domain
    basedir="$launch_dir/$domain"
fi

## Create a list of nameservers
nsLIST="$basedir/$domain\_NS-LIST"
dig "$domain" NS +multiline +noall +answer +short | sort | sed 's/\.$//' > "$nsLIST"
[[ $sEnv == 'bash' ]] && echo ""

## Display the nameservers
if [[ $sEnv == 'bash' ]]; then
    echo -e "\033[1;34mDNS Servers Discovered for $out$domain$hdr:\033[1;33m"
    while read line; do
        echo -e "\033[0m\033[1m[+] $out$line"
    done < "$nsLIST"
fi

## Launch the inner loop, parsing through individual nameservers
while read NS_LIST; do
    if [[ $sEnv == 'bash' ]]; then
        echo -ne "\033[0m\033[1m[~] \033[1;34mDigging through \033[1;33m$NS_LIST \033[1;34mfor Zone Records on \033[1;33m$domain\033[0m\033[1m\n" 
    fi
    (dig @$NS_LIST $domain axfr +time=$time +onesoa > $basedir/$NS_LIST\.lst) > /dev/null 2>&1
    error_check=$(wc -l $basedir/$NS_LIST\.lst | awk '{print $1}')

    ## Remove failed results files
    if [[ $error_check -le 6 ]]; then
        rm $basedir/$NS_LIST\.lst
    fi

    grep "communications error to" $basedir/$NS_LIST\.lst > /dev/null 2>&1
    if [[ $? -eq 0 ]]; then
        rm $basedir/$NS_LIST\.lst
    fi

## Exit the inner loop
done < "$nsLIST"

## Check for failures from the inner loop
ls $basedir/*.lst > /dev/null 2>&1
status=$?
if [[ $status -eq 0 ]]; then
    (ls $basedir/*.lst | sed 's/\.lst$//' > $basedir/tmp_LIST) > /dev/null 2>&1

    ## Launch an inner loop declaring successful axfrs
    while read tmp_list; do
        sAxfr=$(echo $tmp_list | awk -F"/" '{print $(NF)}')
        if [[ $sEnv == 'bash' ]]; then
            echo -ne "\033[0m\033[1m[+] \033[1;36mSuccess with $out$sAxfr \033[31mFOR \033[1;33m$domain\n"
        fi

    ## Exit the inner loop
    done < "$basedir/tmp_LIST"

    rm $basedir/*LIST

    ## Remove .lst extension
    for i in $basedir/*.lst; do
        mv $i "$(echo $i | sed 's/\.lst$//')"
    done

    end_site--
else
    rm -rf $domain
    [[ $sEnv == 'bash' ]] && echo -e "\n"
fi
}


sites--()
{
    end_sites--()
    {
    grep 0 $basedir/SUCCESS > /dev/null 2>&1
    if [[ $? -eq 0 ]]; then
        echo -e "\033[1;33mDone!!$hdr\nRequested Information Listed in $out$basedir\n"
        rm $basedir/SUCCESS
    fi

    echo -ne "\e[0m"
    exit 0
    }

## Deal with math
which bc > /dev/null 2>&1
if [[ $? -ne 0 ]]; then
    echo -e "$wrn The program bc is required for full functionality of dig-em.  Continue anyways? (y/n)$rst"
    read warning
    case $warning in
        y|Y) ;;
        *) exit 1 ;;
    esac
fi
	
## We initiate a trap call so that current progress can be notated
trap trap-- INT

## Used to count progress
counter=1

## Declare a variable for the file we are processing for trap call
list=$file

## Variable for $list linecount
end=$(wc -l $list | awk '{print $1}')

## Strip out empty lines
sed -i '/^$/d' $file

## Check for the directory
if [[ -d DIG_INFOs ]]; then
    mkdir DIG_INFOs_$$
    basedir=$launch_dir/DIG_INFOs_$$
else
    mkdir DIG_INFOs
    basedir=$launch_dir/DIG_INFOs
fi

echo ""

## Launch the outer loop
while read file; do
    cd $basedir

    ## Create a folder for the domain
    mkdir $file

    ## Move to the domain's directory
    cd $file

    ## Create a list of nameservers
    dig $file NS +multiline +noall +answer +short | sort | sed 's/\.$//' > $file\_NS-LIST

    ## Create a file if the domain doesn't have a Nameserver
    fSize=$(wc -l $file\_NS-LIST | awk '{ print $1}')
    if [[ $fSize -eq 0 ]]; then
        echo $file >> $basedir/NoNS.lst
    fi

    ## Display the nameservers
    echo -e "\033[1;34mDNS Servers Discovered for $out$file -- ($counter/$end)$hdr:\033[1;33m"
    let counter++
    while read line; do
        echo -e "\033[0m\033[1m[+] $out$line"
    done < $file\_NS-LIST

    ## Launch the inner loop
    ## Parse through individual nameservers
    while read NS_LIST; do
        echo -ne "\033[0m\033[1m[~] \033[1;34mDigging through \033[1;33m$NS_LIST \033[1;34mfor Zone Records on \033[1;33m$file\033[0m\033[1m" 
        (dig @$NS_LIST $file axfr +time=$time +onesoa > $NS_LIST\.lst) > /dev/null 2>&1
        error_check=$(wc -l $NS_LIST\.lst | awk '{print $1}')

        ## Remove failed result files
        if [[ $error_check -le 6 ]]; then
            rm $NS_LIST\.lst
        fi

        grep "communications error to" $NS_LIST\.lst > /dev/null 2>&1
        if [[ $? -eq 0 ]]; then
            rm $NS_LIST\.lst
        fi

        echo ""

    ## Exit the inner loop
    done < $file\_NS-LIST

    ls *.lst > /dev/null 2>&1
    status=$?
    if [[ $status -eq 0 ]];then
        (ls *.lst |sed 's/\.lst$//' > tmp_LIST) > /dev/null 2>&1

    ## Launch an inner loop declaring successful axfrs
        while read tmp_list; do
            echo -ne "\033[0m\033[1m[+] \033[1;36mSuccess with $out$tmp_list \033[31mFOR \033[1;33m$file\n"

        ## Exit the inner loop
        done < tmp_LIST
        echo -e "\n"

        rm *LIST

        ## Remove .lst extension
        for i in *; do
            mv "$i" "$(echo "$i" | sed 's/\.lst$//')"
        done

        cd $basedir
        echo 0 > SUCCESS

        ## Remove the temp files
        rm -rf $file/*LIST
    else
        cd $basedir
        rm -rf $file
        echo -e "\n"
    fi

## Exit the outer loop
done < $file

cd ..

## Do a check to see if we collected any results.  If not, remove the folder
ls -l $basedir | grep "total 0" > /dev/null 2>&1
if [[ $? -eq 0 ]]; then
    rm -rf $basedir
    echo ""
    exit 0
else
    end_sites--
fi
}

##~~~~~~~~~~~~~~~~~~~~~~~~~~ END Starting Function ~~~~~~~~~~~~~~~~~~~~~~~~~~~~##

##~~~~~~~~~~~~~~~~~~~~~~~~~ BEGIN Launch Conditions ~~~~~~~~~~~~~~~~~~~~~~~~~~~##
envir--
if [[ -z $1 ]]; then
    usage--
fi

if [[ -z $3 ]]; then
    sEnv="bash"
else
    sEnv="python"
fi

[[ $sEnv == 'bash' ]] && clear
while getopts "f:d:" opt; do
    case "$opt" in
        f) file="$OPTARG"
        sites-- ;;

        d) domain="$OPTARG"
        site-- $domain ;;

        \?) usage-- ;;

        :) echo "Option -$OPTARG requires an argument."
        exit 1 ;;
    esac

done
##~~~~~~~~~~~~~~~~~~~~~~~~~ END Launch Conditions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##

##~~~~~~~~~~~~~~~~~~~~~~~~~ File and License Info ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##
## Filename: dig-em
## Copyright (C) <2013>  <stryngs>

##  This program is free software: you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation, either version 3 of the License, or
##  (at your option) any later version.

##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU General Public License for more details.

##  You should have received a copy of the GNU General Public License
##  along with this program.  If not, see <http://www.gnu.org/licenses/>.
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Legal Notice ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##
## This script was written with the intent for Legal PenTesting uses only.
## Make sure that you have consent prior to use on a device other than your own.
## Doing so without the above is a violation of Federal/State Laws within the United States of America.
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##
## I consider any script/program I write to always be a work in progress.
## Please send any tips/tricks/streamlining ideas/comments/kudos via email to: info [AT] ethicalreporting.org

## Comments written with a triple # are notes to myself, please ignore them.
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Concept ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##
## Filename: dig-em

## This script will allow a user to perform a varied number of DNS Nameserver tests in a quick and efficient manner
## For further details, check the bottom of this file
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##

##~~~~~~~~~~~~~~~~~~~~~~~~~~~ Development Notes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##
## 2.0.2
    # Removed unneeded echos for python mode
    # Changed single host axfr to use argument of -d to align with python axfr

## 2.0
    # Modified site--() to accommodate for external Python threading

## 1.9.7
    # added NoNS.lst capabilities for domains that don't have a proper Nameserver

## 1.9.5
    # added +onesoa flag

## 1.9.3
    # fixed -h bug

## 1.9.1
    # Fixed -f bug

## 1.9
    # Fixed https issues
    # Removed _INFO and .lst extensions
    # axfr.lst was removed

## 1.8
    # Cleaned up the structure a little bit
    # Moved notes to the bottom
    # Removed dig_em_again--() capabilities

## 1.6
    # Modified domain_split--() to account for infinite amount of subdomains!

## 1.4
    # The check for failed axfr files was increased from 5 lines to 6 (lines or less).

## 1.2
    # Fixed -h no delete issue
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##

##~~~~~~~~~~~~~~~~~~~~~~~~~~~ Credits and Kudos ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##
## First and foremost, to God above for giving me the abilities I have, Amen.

## The "Community" for always working towards improving the existing.....

## Kudos to my wife for always standing by my side, having faith in me, and showing the greatest of patience for my obsession with hacking.

## Mad_Gouki for his excellent work with the spidering function, byte--()
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##

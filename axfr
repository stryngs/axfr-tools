#!/usr/bin/python3

import argparse
import os
import sys
import threading
from axfr_tools import *
from queue import Queue

def main(args):
    if args.c:
        diff = Compare()
        diff.domains()
        sys.exit(0)

    if args.d:
        a = Axfr()
        a.axfr(args.d[0])
        a.save_to_db(args.d)
        a.con.close()
        sys.exit(0)

    if args.f:
        file_path = args.f[0]
        max_concurrent = int(args.f[1])
        a = Axfr()
        a.process_file(file_path, max_concurrent)
        sys.exit(0)

    if args.q:
        if args.q[0] == 'domainCount':
            query = Queries('domainCount')
            query.domainCount()
        if args.q[0] == 'nameserverCount':
            query = Queries('nameserverCount')
            query.nameserverCount()
        if args.q[0] == 'nameserverDump':
            query = Queries('nameserverDump')
            query.nameserverDump()
        sys.exit(0)

    if args.p:
        rm = Purge()
        rm.domain()
        sys.exit(0)


def menu():
    if len(sys.argv) > 1:
        pass
    else:
        print("The AXFR Toolset\n")
        print("Main Options:")
        print("  Domain List Comparisons:  -c")
        print("  Single Host AXFR attempt: -d")
        print("  Multi Host AXFR attempt:  -f")
        print("    -f <list> <thread count>")
        print("  DB query module:          -q")
        print("    domainCount")
        print("    nameserverCount")
        print("    nameserverDump")
        print("  Purge Domains from DB:    -p")
        print("    -h, --help         show the help message and exits\n")
        sys.exit(0)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='The AXFR Toolset', prog = 'axfr', usage = menu())

    group = parser.add_mutually_exclusive_group(required = True)
    group.add_argument('-c',
                       action = 'store_true',
                       help = 'Domain List Comparisons')
    group.add_argument('-d',
                       type = str,
                       nargs = 1,
                       help = 'Attempt single host zone transfer')
    group.add_argument('-f',
                       type = str,
                       nargs = 2,
                       help = 'Multi-host zone transfer attempt [thread count]')
    group.add_argument('-q',
                       type = str,
                       nargs = 1,
                       choices = ['domainCount',
                                  'nameserverCount',
                                  'nameserverDump'],
                       help = 'DB queries')
    group.add_argument('-p',
                       action = 'store_true',
                       help = 'Zonefile DB Purger')
    args = parser.parse_args()
    main(args)

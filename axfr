#!/usr/bin/env python2.7

import argparse, os, sys
from axfr_tools import *
from Queue import Queue
from threading import Thread
import threading

#def domainParser(q, d, domain):
    #print 'doing something with %s' % q.get()
    #d.dig(domain)
    #q.task_done()

def main(args):
    if args.b:
        build = Builder()
        build.parser()
        build.data_creation()
        build.db_mod()
        sys.exit(0)

    if args.c:
        diff = Compare()
        diff.domains()
        sys.exit(0)

    if args.d:
        d = Dig()
        print args.d
        d.dig(args.d[0])
        sys.exit(0)

    if args.x:
        d = Dig()
        q = Queue(maxsize = 20)
        with open(args.x, 'r') as iFile:
            dList = iFile.read().splitlines()

        ### Need a good method to prevent memory exhaustion for large domain lists
        for i in range(len(dList)):
            worker = Thread(target = d.xdomainParser, args=(q,))
            worker.setDaemon(True)
            worker.start()

        for i in dList:
            q.put(i)
        q.join()

    if args.f:
        d = Dig()
        maxthreads = 2
        sema = threading.Semaphore(value=maxthreads)
        threads = list()
        with open(args.f, 'r') as iFile:
            dList = iFile.read().splitlines()
        for i in dList:
            thread = threading.Thread(target = d.domainParser, args = (str(i), sema))
            threads.append(thread)
            thread.start()

    if args.m:
        bDir = os.getcwd()
        diff = Compare()
        combine = Merger()
        d, f = diff.recurser(bDir)
        combine.digs(d, f)
        sys.exit(0)

    if args.q:
        if args.q[0] == 'domainCount':
            query = Queries('domainCount')
            query.domainCount()
        if args.q[0] == 'nameserverCount':
            query = Queries('nameserverCount')
            query.nameserverCount()
        if args.q[0] == 'nameserverDump':
            query = Queries('nameserverDump')
            query.nameserverDump()
        sys.exit(0)

    if args.p:
        rm = Purge()
        rm.domain()
        sys.exit(0)

    if args.s:
        ## Set the class
        if args.s[0] == 'gwebtools' or args.s[0] == 'whois':
            nServer = raw_input('Which nameserver to query for?\n')
            scrape = nScraper(nServer)
        if args.s[0] == 'robtex':
            dm = raw_input('Which domain to query with?\n')
            scrape = dScraper(dm)
        if args.s[0] == 'domaintyper':
            tld = raw_input('Which TLD to query for?\n')
            scrape = tScraper(tld)

        ## Domain modules
        if args.s[0] == 'robtex':
            scrape.robtex()

        ## Nameserver modules
        if args.s[0] == 'gwebtools':
            scrape.gwebtools()
        if args.s[0] == 'whois':
            scrape.whois()

        ## TLD modules
        if args.s[0] == 'domaintyper':
            scrape.domaintyper()

        ## EOF
        sys.exit(0)

def menu():
    if len(sys.argv) > 1:
        pass
    else:
        print "The AXFR Toolset\n"
        print "Main Options:"
        print "  Domain List Comparisons: -c"
        print "  Zonefile DB builder:     -b"
        print "  DIG_INFOs Merger:        -m"
        print "  DB query module:         -q"
        print "    domainCount"
        print "    nameserverCount"
        print "    nameserverDump"
        print "  Purge Domains from DB:   -p"
        print "  Scrapers:                -s"
        print "    * Domains"
        print "        domaintyper"
        print "        robtex"
        print "    * Nameservers"
        print "        gwebtools"
        print "        whois\n"
        print "    -h, --help         show the help message and exits\n"
        sys.exit(0)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='The AXFR Toolset', prog = 'axfr', usage = menu())

    group = parser.add_mutually_exclusive_group(required = True)
    group.add_argument('-b',
                       action = 'store_true',
                       help = 'Zonefile DB Builder')
    group.add_argument('-c',
                       action = 'store_true',
                       help = 'Domain List Comparisons')
    group.add_argument('-d',
                       type = str,
                       nargs = 1,
                       help = 'Attempt single host zone transfer')
    group.add_argument('-f',
                       type = str,
                       help = 'Threaded multi-host zone transfer attempt')
    group.add_argument('-x',
                       type = str,
                       help = 'Threaded multi-host zone transfer attempt')
    group.add_argument('-m',
                       action = 'store_true',
                       help = 'DIG_INFOs Merger')
    group.add_argument('-q',
                       type = str,
                       nargs = 1,
                       choices = ['domainCount',
                                  'nameserverCount',
                                  'nameserverDump'],
                       help = 'DB queries')
    group.add_argument('-p',
                       action = 'store_true',
                       help = 'Zonefile DB Purger')
    group.add_argument('-s',
                       type = str,
                       nargs = 1,
                       choices = ['domaintyper',
                                  'gwebtools',
                                  'robtex',
                                  'whois'],
                       help = 'Scrapers')
    args = parser.parse_args()
    main(args)
